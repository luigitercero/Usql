/* Generated By:JavaCC: Do not edit this line. ej1.java */
package FISQL.Interprete.Lenguaje;
import java.io.*;

import java.io.*;
class ej1 implements ej1Constants {
        public static void main( String[] args )throws ParseException, Exception
        {
                        System.out.println("\u005ctinicaiando.");
                        String a =  "45<45||45 >35547&& 12<=12 || 58>=48 *45 /4 +6 -6 ^6+a+\u005c"hola1234\u005c"+'03-15-2016'";
                try
                {
                ej1 analizador = new ej1(new StringReader("3+4+6+7+9") ) ;
                        analizador.S().recorrerHijos();
                        System.out.println("\u005ctAnalizador ha terminado.");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\u005ctAnalizador ha terminado.");
                }
        }

  final public Nodo S() throws ParseException {
 Nodo hijo;
    hijo = exp();
    jj_consume_token(0);
                      {if (true) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo exp() throws ParseException {
            Nodo hijo, hijoS;
    hijo = and();
    hijoS = expp(hijo);
                                    {if (true) return hijoS;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo expp(Nodo padre) throws ParseException {
                       Nodo abuelo = new Nodo("exp"), hijo , hijoS;Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      t1 = jj_consume_token(OR);
      hijo = and();
                             abuelo.addHijo(padre,new  Nodo(t1),hijo);
      hijoS = expp(abuelo);
                                                                                              {if (true) return hijoS;}
      break;
    default:
      jj_la1[0] = jj_gen;
       {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo and() throws ParseException {
            Nodo hijo,hijoS;
    hijo = not();
    hijoS = andd(hijo);
                                    {if (true) return hijoS;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo andd(Nodo padre) throws ParseException {
                       Nodo abuelo = new Nodo("exp"),hijo,hijoS; Token t1, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t1 = jj_consume_token(AND);
      hijo = not();
                             abuelo.addHijo(padre,new Nodo(t1),hijo);
      hijoS = andd(abuelo);
                                                                                             {if (true) return hijoS;}
      break;
    default:
      jj_la1[1] = jj_gen;
      {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo not() throws ParseException {
            Nodo hijo,padre = new Nodo("exp"); Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      t1 = jj_consume_token(NOT);
      hijo = relacional();
                                    padre.hijo.add(new Nodo(t1));padre.hijo.add(hijo);{if (true) return padre;}
      break;
    case ID:
    case MENOS:
    case NUM:
    case FECHA:
    case FECHA_HORA:
    case DECIMAL:
    case CADENA:
      hijo = relacional();
                         {if (true) return hijo;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo relacional() throws ParseException {
                   Nodo hijo ,hijoS;
    hijo = aritmetica();
    hijoS = relacionalp(hijo);
                                                  {if (true) return hijoS;}
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo relacionalp(Nodo padre) throws ParseException {
                              Nodo hijo,abuelo = new Nodo("exp"),hijoS; Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUALIGUAL:
      t1 = jj_consume_token(IGUALIGUAL);
      hijo = aritmetica();
                                           abuelo.addHijo(padre, new Nodo(t1), hijo);
      hijoS = relacionalp(padre);
                                                                                                                  {if (true) return hijoS;}
      break;
    case NOTIGUAL:
      t1 = jj_consume_token(NOTIGUAL);
      hijo = aritmetica();
                                           abuelo.addHijo(padre, new Nodo(t1), hijo);
      hijoS = relacionalp(padre);
                                                                                                                  {if (true) return hijoS;}
      break;
    case MAYORQUE:
      t1 = jj_consume_token(MAYORQUE);
      hijo = aritmetica();
                                           abuelo.addHijo(padre, new Nodo(t1), hijo);
      hijoS = relacionalp(padre);
                                                                                                                  {if (true) return hijoS;}
      break;
    case MENORQUE:
      t1 = jj_consume_token(MENORQUE);
      hijo = aritmetica();
                                           abuelo.addHijo(padre, new Nodo(t1), hijo);
      hijoS = relacionalp(padre);
                                                                                                                  {if (true) return hijoS;}
      break;
    case MAYORIGUAL:
      t1 = jj_consume_token(MAYORIGUAL);
      hijo = aritmetica();
                                           abuelo.addHijo(padre, new Nodo(t1), hijo);
      hijoS = relacionalp(padre);
                                                                                                                  {if (true) return hijoS;}
      break;
    case MENORIGUAL:
      t1 = jj_consume_token(MENORIGUAL);
      hijo = aritmetica();
                                           abuelo.addHijo(padre, new Nodo(t1), hijo);
      hijoS = relacionalp(padre);
                                                                                                                  {if (true) return hijoS;}
      break;
    default:
      jj_la1[3] = jj_gen;
      {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo aritmetica() throws ParseException {
                   Nodo hijo,hijoS;
    hijo = armd();
    hijoS = aritmeticap(hijo);
                                            {if (true) return hijoS;}
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo aritmeticap(Nodo padre) throws ParseException {
                              Nodo hijo = new Nodo("exp"),abuelo = new Nodo("exp"),hijoS;Token t1, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAS:
      t1 = jj_consume_token(MAS);
      hijo = armd();
                                abuelo.addHijo(padre,new Nodo (t1),hijo);
      hijoS = aritmeticap(abuelo);
                                                                                                       {if (true) return hijoS;}
      break;
    case MENOS:
      t1 = jj_consume_token(MENOS);
      hijo = armd();
                                abuelo.addHijo(padre,new Nodo (t1),hijo);
      hijoS = aritmeticap(abuelo);
                                                                                                       {if (true) return hijoS;}
      break;
    default:
      jj_la1[4] = jj_gen;
      {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo armd() throws ParseException {
             Nodo hijo, hijoS;
    hijo = arExp();
    hijoS = armdp(hijo);
                                       {if (true) return hijoS;}
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo armdp(Nodo padre) throws ParseException {
                        Nodo hijo = new Nodo("exp"),hijoS, abuelo = new Nodo("exp");Token t1, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POR:
      t1 = jj_consume_token(POR);
      hijo = arExp();
                                abuelo.addHijo(padre,new Nodo (t1),hijo);
      hijoS = armdp(abuelo);
                                                                                                 {if (true) return hijoS;}
      break;
    case DIV:
      t1 = jj_consume_token(DIV);
      hijo = arExp();
                                abuelo.addHijo(padre,new Nodo (t1),hijo);
      hijoS = armdp(abuelo);
                                                                                                 {if (true) return hijoS;}
      break;
    default:
      jj_la1[5] = jj_gen;
      {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo arExp() throws ParseException {
              Nodo hijo = new Nodo("exp"),hijoS;
    hijo = arUnario();
    hijoS = arExpp(hijo);
                                           {if (true) return hijoS;}
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo arExpp(Nodo padre) throws ParseException {
                         Nodo hijo = new Nodo("exp"),abuelo = new Nodo("exp"),hijoS;Token t1, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELEVA:
      t1 = jj_consume_token(ELEVA);
      hijo = arUnario();
                                    abuelo.addHijo(padre,new Nodo(t1),hijo);
      hijoS = arExpp(abuelo);
                                                                                                     {if (true) return hijoS;}
      break;
    default:
      jj_la1[6] = jj_gen;
      {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo arUnario() throws ParseException {
                 Nodo hijo,hijo2,padre = new Nodo("exp"); Token t1, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      t1 = jj_consume_token(MENOS);
      hijo = valores();
                                  padre.hijo.add(new Nodo(t1));padre.hijo.add(hijo);{if (true) return padre;}
      break;
    case ID:
    case NUM:
    case FECHA:
    case FECHA_HORA:
    case DECIMAL:
    case CADENA:
      hijo = valores();
                      {if (true) return hijo;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//ya
  final public Nodo valores() throws ParseException {
                Nodo hijo = new Nodo("exp"); Token t1, t2, t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t1 = jj_consume_token(NUM);
                       hijo.hijo.add(new Nodo(t1));{if (true) return hijo;}
      break;
    case FECHA:
      t1 = jj_consume_token(FECHA);
                       hijo.hijo.add(new Nodo(t1));{if (true) return hijo;}
      break;
    case FECHA_HORA:
      t1 = jj_consume_token(FECHA_HORA);
                       hijo.hijo.add(new Nodo(t1));{if (true) return hijo;}
      break;
    case DECIMAL:
      t1 = jj_consume_token(DECIMAL);
                       hijo.hijo.add(new Nodo(t1));{if (true) return hijo;}
      break;
    case CADENA:
      t1 = jj_consume_token(CADENA);
                       hijo.hijo.add(new Nodo(t1));{if (true) return hijo;}
      break;
    case ID:
      t1 = jj_consume_token(ID);
                       hijo.hijo.add(new Nodo(t1));{if (true) return hijo;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ej1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x8,0x1f1014,0x7e0,0x1800,0x6000,0x8000,0x1f1010,0x1f0010,};
   }

  /** Constructor with InputStream. */
  public ej1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ej1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ej1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ej1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ej1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ej1(ej1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ej1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
