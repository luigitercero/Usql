/* Generated By:JavaCC: Do not edit this line. ej1.java */
package FISQL.Interprete.XML;
import java.io.*;

public class ej1 implements ej1Constants {
        public static void main( String[] args )throws ParseException, Exception
        {
                        System.out.println("\u005ctiniciando.");

                try
                {
                ej1 analizador = new ej1( new StringReader("<db><nombre>primera Base De Datos</nombre> <path>primera_base_Datos</path></db>"+
"<db><nombre>segunda Base De Datos</nombre> <path>segunda_base_Datos</path></db>")) ;
                        analizador.Inicio().recorrerHijos();
                        System.out.println("\u005ctAnalizador ha terminado.");
                }
                catch(ParseException e)
                {
                        System.out.println(e.getMessage());
                        System.out.println("\u005ctAnalizador ha terminado.");
                }
        }

  final public Nodo Inicio() throws ParseException {
                       Nodo padre,hijo;
     padre = new Nodo("inicio");
    hijo = cod();
                                             padre.hijo.add(hijo);
//System.out.println("agregar a " + padre.nombre + " -> " + hijo.nombre);

    codp(padre);
    jj_consume_token(0);
                  {if (true) return padre;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo cod() throws ParseException {
            String abre,cierra; Nodo hijo;
    //abre codhtml cierra
    abre = Abre();
              hijo = new Nodo(abre);
    Codhtml(hijo);
    cierra = Cierra();
                                                                      {if (true) return hijo;}
    throw new Error("Missing return statement in function");
  }

  final public void codp(Nodo padre) throws ParseException {
                       Nodo hijo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case abre:
      //codp-> cod codp;
          hijo = cod();
                 padre.hijo.add(hijo);
//System.out.println("agregar a " + padre.nombre + " -> " + hijo.nombre);

      codp(padre);
      break;
    default:
      jj_la1[0] = jj_gen;
      {if (true) return;}
    }
  }

  final public void Codhtml(Nodo padre) throws ParseException {
                          Nodo hijo;
    // Codhtml-> Palabra Codhtmlp.
        hijo = Palabra();
                     padre.hijo.add(hijo);
//System.out.println("agregar a " + padre.nombre + " -> " + hijo.nombre);

    Codhtmlp(padre);
  }

  final public void Codhtmlp(Nodo padre) throws ParseException {
                           Nodo hijo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case abre:
    case id:
    case todo:
    case num:
    case script:
      //Codhtmlp-> Palabra Codhtmlp.
              //Codhtmlp-> .
              hijo = Palabra();
                         padre.hijo.add(hijo);//System.out.println("agregar a " + padre.nombre + " -> " + hijo.nombre);

      Codhtmlp(padre);
      break;
    default:
      jj_la1[1] = jj_gen;
          {if (true) return;}
    }
  }

  final public Nodo Palabra() throws ParseException {
                Token token; String dato;Nodo hijo;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case id:
      //palabra-> id.
              //palabra-> todo.
              //palabra-> cod.
              token = jj_consume_token(id);
                     {if (true) return new Nodo (token.image,token);}
      break;
    case todo:
      token = jj_consume_token(todo);
                        {if (true) return new Nodo (token.image,token);}
      break;
    case num:
      token = jj_consume_token(num);
                       {if (true) return new Nodo (token.image,token);}
      break;
    case abre:
      hijo = cod();
                      {if (true) return hijo;}
      break;
    case script:
      token = jj_consume_token(script);
                          {if (true) return new Nodo (token.image,token);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Abre() throws ParseException {
               Token Id;
    jj_consume_token(abre);
    Id = jj_consume_token(id);
    jj_consume_token(cierra);
                                 {if (true) return Id.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Cierra() throws ParseException {
                 Token Id;
    jj_consume_token(slash);
    Id = jj_consume_token(id);
    jj_consume_token(cierra);
                                  {if (true) return Id.image;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ej1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40,0x1e40,0x1e40,};
   }

  /** Constructor with InputStream. */
  public ej1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ej1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ej1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ej1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ej1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ej1(ej1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ej1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[13];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 13; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
